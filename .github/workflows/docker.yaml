name: Deploy Docker Image to GHCR
on:
  push:
    branches:
      - main

env:
  IMAGE_ID: ghcr.io/${{ github.repository }}

jobs:
  build-client:
    name: Build CRA Client
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@main

      - name: Setup Node.js (NPM)
        uses: actions/setup-node@master
        with:
          node-version: '14.x'

      - name: Cache Node Modules
        uses: c-hive/gha-yarn-cache@v2
        with:
          directory: client

      - name: Install dependencies
        run: |
          cd client
          yarn install --frozen-lockfile
        env:
          CI: true

      - name: Build
        run: |
          cd client
          yarn build
        env:
          CI: true

      - name: Archive Production Artifact
        uses: actions/upload-artifact@main
        with:
          name: client
          path: client/build

  build-server:
    name: Build GoLang ${{ matrix.arch }} Server
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ['amd64', 'arm']

    steps:
      - name: Checkout Repo
        uses: actions/checkout@main

      - name: Set up Go 1.16
        uses: actions/setup-go@v1
        with:
          go-version: 1.16
        id: go

      - name: Install Dependencies
        run: go get -d -v
        working-directory: server

      # - name: Run Tests
      #   run: go test -tags mock ./...
      #   working-directory: server

      - name: Build
        run: CGO_ENABLED=0 GOOS=linux GOARCH=${{ matrix.arch }} go build -a streamr
        working-directory: server

      - name: 'Tar files'
        run: |
          mv streamr server
          tar -cvf server.tar server
        working-directory: server

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: server-${{ matrix.arch }}
          path: server/server.tar

  dockerize:
    name: Dockerize ${{ matrix.arch }} Application
    needs:
      - build-client
      - build-server
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ['amd64', 'arm']

    steps:
      - name: Checkout Repo
        uses: actions/checkout@main

      - name: Download Client Artifact
        uses: actions/download-artifact@main
        with:
          name: client
          path: build/client

      - name: Download Server Tar Artifact
        uses: actions/download-artifact@main
        with:
          name: server-${{ matrix.arch }}
          path: build

      - name: Extract Tar files
        run: tar -xvf server.tar server
        working-directory: build

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true

      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build amd64 Docker Image
        run: docker build --platform linux/${{ matrix.arch }} --push -t ${{ env.IMAGE_ID }}:${{ matrix.arch }} .
